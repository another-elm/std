# NEWS

A little inline blog documenting the development of this library.

# 2020/4/26 -- A new internal module `Platform.Raw.Impure`

This module contains an abstaction for functions that **do things** when
they are run. The functions in this module are constrained to take one argument
and return the unit tuple.

Why can we not use Task's for this, given that this is _exactly_ what they are
intended for. Well, two reasons

1. Sometimes we need a guarantee that the function will be run exactly when we
   need to run. Task are always enqueued; they are only run after stepping
   through all the previous Tasks in the queue. Sometimes, this is not
   acceptable, for instance when updating the listeners for a subscription
   effect.

2. We need to use impure functions to run Tasks. The
   `Platform.Raw.Scheduler.enqueue` function takes a Task, adds it to the
   scheduler queue and, if the scheduler is not currently stepping tasks (i.e.
   this is not a reentrant call to `Platform.Raw.Scheduler.enqueue`), starts
   stepping. This function is impure. However, if we represented it as a Task
   we would have an infinite loop!

Hopefully, use of this module can be reduced to a couple of key places and
maybe even inlined into the scheduler is that is the only place that uses it.
Hopefully, it will help us move all effectful functions out of elm.
