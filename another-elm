#! /usr/bin/env python3

import os
import random
import shutil
import string
import subprocess
import sys

elm_std_dir = os.path.dirname(os.path.realpath(__file__))


def replace_with_stub(packages_root, author, package):
    versions_dir = os.path.join(packages_root, author, package)
    try:
        dirs = os.listdir(versions_dir)
    except FileNotFoundError:
        return

    for v in dirs:
        package_root = os.path.join(versions_dir, v)
        src_dir = os.path.join(package_root, "src")
        stub_file = os.path.join(package_root, "stub")
        elm_json_path = os.path.join(package_root, "elm.json")

        dummy_module = "P{}".format(''.join(
            [random.choice(string.ascii_letters) for n in range(32)]))
        dummy_path = os.path.join(src_dir, "{}.elm".format(dummy_module))

        shutil.rmtree(package_root)
        os.makedirs(src_dir)

        with open(stub_file, 'w'):
            pass

        with open(dummy_path, 'w') as f:
            f.write("""module {} exposing (..)

a = 2
""".format(dummy_module))

        with open(elm_json_path, 'w') as f:
            f.write("""
{{
    "type": "package",
    "name": "{}/{}",
    "summary": "Encode and decode JSON values",
    "license": "BSD-3-Clause",
    "version": "{}",
    "exposed-modules": [
        "{}"
    ],
    "elm-version": "0.19.0 <= v < 0.20.0",
    "dependencies": {{
        "elm/core": "1.0.0 <= v < 2.0.0"
    }},
    "test-dependencies": {{}}
}}
            """.format(author, package, v, dummy_module).strip())


def customize(package, packages_root):
    versions_dir = os.path.join(packages_root, "elm", package)
    custom_package_dir = os.path.join(elm_std_dir, package)

    custom_src_dir = os.path.join(custom_package_dir, "src")
    custom_json_file = os.path.join(custom_package_dir, "elm.json")

    try:
        dirs = os.listdir(versions_dir)
    except FileNotFoundError:
        dirs = []

    any_modified = False
    for v in dirs:
        package_root = os.path.join(versions_dir, v)

        if not os.path.exists(os.path.join(package_root, 'custom')):
            any_modified = True

            shutil.rmtree(package_root)
            os.makedirs(package_root)

            shutil.copytree(custom_src_dir, os.path.join(package_root, "src"))
            shutil.copy(custom_json_file, os.path.join(package_root,
                                                       "elm.json"))

            with open(os.path.join(package_root, 'custom'), 'w'):
                pass

    return any_modified


def wrapped_run(elm, args):
    elm_home_dir = os.getenv('ELM_HOME', default=os.path.expanduser('~/.elm'))
    another_elm_home_dir = os.path.join(elm_home_dir, 'another')

    custom_env = os.environ.copy()
    custom_env["ELM_HOME"] = another_elm_home_dir

    elm_version = subprocess.run([elm, "--version"],
                                 stderr=subprocess.PIPE,
                                 stdout=subprocess.PIPE,
                                 check=True).stdout.decode("utf-8").strip()

    packages_root = os.path.join(another_elm_home_dir, elm_version, 'packages')

    def run_compiler(**kwargs):
        return subprocess.run([elm] + args, env=custom_env,
                              **kwargs).returncode

    if not os.path.exists(packages_root):
        try:
            shutil.rmtree('elm-stuff')
        except FileNotFoundError:
            pass

    run_compiler(stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)

    # TODO(harry) fixme
    if not os.path.exists(another_elm_home_dir):
        return 0

    replace_with_stub(packages_root, 'elm', 'time')
    replace_with_stub(packages_root, 'elm', 'random')
    replace_with_stub(packages_root, 'elm', 'virtual-dom')
    replace_with_stub(packages_root, 'elm', 'url')
    replace_with_stub(packages_root, 'elm', 'html')

    for pkg in ['core', 'json', 'browser']:
        if customize(pkg, packages_root):
            shutil.rmtree("elm-stuff")
            run_compiler(stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
            for author in os.scandir(packages_root):
                if author.name != "elm" and author.is_dir():
                    shutil.rmtree(author.path)

    return run_compiler()


args = []
if len(sys.argv) > 1:
    args = sys.argv[1:]

elm = os.getenv('ELM', 'elm')

exit(wrapped_run(elm, args))
