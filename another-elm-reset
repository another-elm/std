#! /usr/bin/env python3

import os

elm_std_dir = os.path.dirname(os.path.realpath(__file__))


def is_update_needed(package_root, relevant_custom_paths):
    last_updated_time = None

    try:
        last_updated_time = os.path.getmtime(
            os.path.join(package_root, 'custom'))
    except (FileNotFoundError, ValueError):
        return True

    for relevant_custom_path in relevant_custom_paths:
        for dirpath, _, files in os.walk(relevant_custom_path):
            if os.path.getmtime(dirpath) > last_updated_time:
                return True
            for file in files:
                if os.path.getmtime(os.path.join(dirpath,
                                                 file)) > last_updated_time:
                    return True


def reset_package(packages_root, author, package):
    versions_dir = os.path.join(packages_root, author, package)
    custom_package_dir = os.path.join(elm_std_dir, package)

    custom_src_dir = os.path.join(custom_package_dir, "src")
    custom_json_file = os.path.join(custom_package_dir, "elm.json")

    try:
        dirs = os.listdir(versions_dir)
    except FileNotFoundError:
        dirs = []

    any_modified = False
    for v in dirs:
        package_root = os.path.join(versions_dir, v)

        if is_update_needed(package_root, [custom_src_dir, custom_json_file]):
            any_modified = True

            try:
                os.remove(os.path.join(package_root, 'custom'))
            except FileNotFoundError:
                pass

    return any_modified


def wrapped_run(elm):
    elm_home_dir = os.getenv('ELM_HOME', default=os.path.expanduser('~/.elm'))
    another_elm_home_dir = os.path.join(elm_home_dir, 'another')

    custom_env = os.environ.copy()
    custom_env["ELM_HOME"] = another_elm_home_dir

    some_packages_reset = False

    try:
        elm_versions = os.listdir(another_elm_home_dir)
    except FileNotFoundError:
        if not some_packages_reset:
            print((
                "Warning: "
                "nothing reset as elm home is empty (just run `another-elm`)"))

        return 0

    for elm_version in elm_versions:

        packages_root = os.path.join(another_elm_home_dir, elm_version,
                                     'packages')

        for (author, pkg) in [('elm', 'core'), ('elm', 'json'),
                              ('elm', 'browser'),
                              ('elm-explorations', 'test')]:
            if reset_package(packages_root, author, pkg):
                some_packages_reset = True

    if not some_packages_reset:
        print(("Warning: "
               "nothing reset as source is no newer than linked packages."))

    return 0


elm = os.getenv('ELM', 'elm')

exit(wrapped_run(elm))
