/*

import Elm.Kernel.Json exposing (fileDecoder)
import Elm.Kernel.List exposing (fromArray)
import Elm.Kernel.Scheduler exposing (binding, succeed)
import Elm.Kernel.Utils exposing (Tuple2)
import String exposing (join)
import Time exposing (millisToPosix)

*/

// DECODER

const _File_decoder = __Json_fileDecoder;

// METADATA

function _File_name(file) {
  return file.name;
}

function _File_mime(file) {
  return file.type;
}

function _File_size(file) {
  return file.size;
}

function _File_lastModified(file) {
  return __Time_millisToPosix(file.lastModified);
}

/* eslint-disable */

// DOWNLOAD

let _File_downloadNode;

function _File_getDownloadNode() {
  return _File_downloadNode || (_File_downloadNode = document.createElement("a"));
}

const _File_download = F3(function (name, mime, content) {
  return __Scheduler_binding(function (callback) {
    const blob = new Blob([content], { type: mime });

    // for IE10+
    if (navigator.msSaveOrOpenBlob) {
      navigator.msSaveOrOpenBlob(blob, name);
      return;
    }

    // for HTML5
    const node = _File_getDownloadNode();
    const objectUrl = URL.createObjectURL(blob);
    node.href = objectUrl;
    node.download = name;
    _File_click(node);
    URL.revokeObjectURL(objectUrl);
  });
});

function _File_downloadUrl(href) {
  return __Scheduler_binding(function (callback) {
    const node = _File_getDownloadNode();
    node.href = href;
    node.download = "";
    node.origin === location.origin || (node.target = "_blank");
    _File_click(node);
  });
}

// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes) {
  // only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
  // all other browsers can just run `new Blob([bytes])` directly with no problem
  //
  return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node) {
  // only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
  // all other browsers have MouseEvent and do not need this conditional stuff
  //
  if (typeof MouseEvent === "function") {
    node.dispatchEvent(new MouseEvent("click"));
  } else {
    const event = document.createEvent("MouseEvents");
    event.initMouseEvent(
      "click",
      true,
      true,
      window,
      0,
      0,
      0,
      0,
      0,
      false,
      false,
      false,
      false,
      0,
      null
    );
    document.body.append(node);
    node.dispatchEvent(event);
    node.remove();
  }
}

// UPLOAD

let _File_node;

function _File_uploadOne(mimes) {
  return __Scheduler_binding(function (callback) {
    _File_node = document.createElement("input");
    _File_node.type = "file";
    _File_node.accept = A2(__String_join, ",", mimes);
    _File_node.addEventListener("change", function (event) {
      callback(__Scheduler_succeed(event.target.files[0]));
    });
    _File_click(_File_node);
  });
}

function _File_uploadOneOrMore(mimes) {
  return __Scheduler_binding(function (callback) {
    _File_node = document.createElement("input");
    _File_node.type = "file";
    _File_node.multiple = true;
    _File_node.accept = A2(__String_join, ",", mimes);
    _File_node.addEventListener("change", function (event) {
      const elmFiles = __List_fromArray(event.target.files);
      callback(__Scheduler_succeed(__Utils_Tuple2(elmFiles.a, elmFiles.b)));
    });
    _File_click(_File_node);
  });
}


/* eslint-enable */

// CONTENT

function _File_toString(blob) {
  return __Scheduler_binding((callback) => {
    const reader = new FileReader();
    reader.addEventListener("loadend", () => {
      callback(__Scheduler_succeed(reader.result));
    });
    reader.readAsText(blob);
    return function () {
      reader.abort();
    };
  });
}

function _File_toBytes(blob) {
  return __Scheduler_binding((callback) => {
    const reader = new FileReader();
    reader.addEventListener("loadend", () => {
      callback(__Scheduler_succeed(new DataView(reader.result)));
    });
    reader.readAsArrayBuffer(blob);
    return function () {
      reader.abort();
    };
  });
}

function _File_toUrl(blob) {
  return __Scheduler_binding((callback) => {
    const reader = new FileReader();
    reader.addEventListener("loadend", () => {
      callback(__Scheduler_succeed(reader.result));
    });
    reader.readAsDataURL(blob);
    return function () {
      reader.abort();
    };
  });
}

/* ESLINT GLOBAL VARIABLES
 *
 * Do not edit below this line as it is generated by tests/generate-globals.py
 */

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "_File_.*" }] */

/* global __Json_fileDecoder */
/* global __List_fromArray */
/* global __Scheduler_binding, __Scheduler_succeed */
/* global __Utils_Tuple2 */
/* global __String_join */
/* global __Time_millisToPosix */
