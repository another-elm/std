/*

import Array exposing (initialize)
import Result exposing (Ok, Err)
import Maybe exposing (Just, Nothing)
import Elm.Kernel.Utils exposing (Tuple2)
import Json.Internal as Internal exposing (Value, unwrap)
import Json.Decode as Decode exposing (Decoder, Failure)
import Json.Encode as Encode exposing (Value, unwrap)

*/

// CORE DECODERS

const _Json_decodeInt = (value) => {
  return Number.isInteger(value) ? __Maybe_Just(value) : __Maybe_Nothing;
};

const _Json_decodeBool = (value) => {
  return typeof value === "boolean" ? __Maybe_Just(value) : __Maybe_Nothing;
};

const _Json_decodeFloat = (value) => {
  return typeof value === "number" ? __Maybe_Just(value) : __Maybe_Nothing;
};

const _Json_decodeString = (value) => {
  if (typeof value === "string") {
    return __Maybe_Just(value);
  }

  if (value instanceof String) {
    return __Maybe_Just(String(value));
  }

  return __Maybe_Nothing;
};

// DECODE

const _Json_rawParse = (string) => {
  try {
    const value = JSON.parse(string);
    return __Result_Ok(value);
  } catch (error) {
    return __Result_Err(String(error.message));
  }
};

function _Json_isNull(value) {
  return value === null;
}

function _Json_isArray(value) {
  return Array.isArray(value) || (typeof FileList !== "undefined" && value instanceof FileList);
}

function _Json_isObject(value) {
  return typeof value === "object" && value !== null;
}

const _Json_getField = (name) => (value) => {
  return _Json_isObject(value) && name in value ? __Maybe_Just(value[name]) : __Maybe_Nothing;
};

const _Json_decodeArray = (value) => {
  if (_Json_isArray(value)) {
    return __Maybe_Just(value);
  }

  return __Maybe_Nothing;
};

const _Json_decodeObject = (obj) => {
  if (_Json_isObject(obj) && !_Json_isArray(obj)) {
    const keyValues = {
      *[Symbol.iterator]() {
        for (const [key, value] of Object.entries(obj)) {
          yield __Utils_Tuple2(key, value);
        }
      },
    };
    return __Maybe_Just(keyValues);
  }

  return __Maybe_Nothing;
};

const _Json_getArrayLength = (value) => {
  if (_Json_isArray(value)) {
    return __Maybe_Just(value.length);
  }

  return __Maybe_Nothing;
};

const _Json_uncheckedArrayGet = (i) => (value) => {
  return value[i];
};

function _Json_toElmArray(array) {
  return A2(__Array_initialize, array.length, (i) => {
    return array[i];
  });
}

// ENCODE

const _Json_encode = (indentLevel) => (value) => JSON.stringify(value, null, indentLevel);

const _Json_arrayFrom = (func) => (iterable) => {
  const array = [];
  for (const element of iterable) {
    array.push(func(element));
  }

  return array;
};

const _Json_objectFrom = (keyFunc) => (valueFunc) => (iterable) => {
  const object = {};
  for (const pair of iterable) {
    const key = pair.a;
    const value = pair.b;
    object[keyFunc(key)] = valueFunc(value);
  }

  return object;
};

const _Json_fileDecoder = () =>
  __Decode_Decoder((value) => {
    // NOTE: checks if `File` exists in case this is run on node
    return typeof File !== "undefined" && value instanceof File
      ? __Result_Ok(value)
      : __Result_Err(__Decode_Failure("Expecting a FILE")(_Json_wrap(value)));
  });

const _Json_null = null;

const _Json_wrap = (o) => __Encode_Value(__Internal_Value(o));
const _Json_unwrap = (v) => __Encode_unwrap(__Internal_unwrap(v));

/* ESLINT GLOBAL VARIABLES
 *
 * Do not edit below this line as it is generated by tests/generate-globals.py
 */

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "_Json_.*" }] */

/* global __Array_initialize */
/* global __Result_Ok, __Result_Err */
/* global __Maybe_Just, __Maybe_Nothing */
/* global __Utils_Tuple2 */
/* global __Internal_Value, __Internal_unwrap */
/* global __Decode_Decoder, __Decode_Failure */
/* global __Encode_Value, __Encode_unwrap */
